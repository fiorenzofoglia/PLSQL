create or replace PACKAGE pkg_operazioni_test IS

   /* generated by utPLSQL for SQL Developer on 2019-10-08 17:01:53 */

   --%suite(pkg_operazioni_test)
   --%suitepath(alltests)

   --%context(moltiplica)

   --%test
   PROCEDURE moltiplica1;

   --%test
   PROCEDURE moltiplica2;

   --%test
   PROCEDURE moltiplica3;

   --%endcontext

   --%context(dividi)

   --%test
   PROCEDURE dividi1;

   --%test
   PROCEDURE dividi2;

   --%test
   PROCEDURE dividi3;

   --%endcontext

END pkg_operazioni_test;
/

create or replace PACKAGE BODY pkg_operazioni_test IS

   /* generated by utPLSQL for SQL Developer on 2019-10-08 17:01:53 */

   --
   -- test moltiplica case 1: ...
   --
   PROCEDURE moltiplica1 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      pkg_operazioni.moltiplica(1,2,l_actual);

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END moltiplica1;

   --
   -- test moltiplica case 2: ...
   --
   PROCEDURE moltiplica2 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      pkg_operazioni.moltiplica(1,0,l_actual);

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END moltiplica2;

   --
   -- test moltiplica case 3: ...
   --
   PROCEDURE moltiplica3 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      pkg_operazioni.moltiplica(1.2,2,l_actual);

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END moltiplica3;

   --
   -- test dividi case 1: ...
   --
   PROCEDURE dividi1 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      pkg_operazioni.dividi(1,2,l_actual);

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END dividi1;

   --
   -- test dividi case 2: ...
   --
   PROCEDURE dividi2 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      pkg_operazioni.dividi(1,2,l_actual);

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END dividi2;

   --
   -- test dividi case 3: ...
   --
   PROCEDURE dividi3 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      pkg_operazioni.dividi(1,2,l_actual);

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END dividi3;

END pkg_operazioni_test;
/
