create or replace PACKAGE     ut3.test_package_da_testare IS

   /* generated by utPLSQL for SQL Developer on 2019-10-07 15:25:29 */

   --%suite(test_package_da_testare)
   --%suitepath(alltests)

   --%context(moltiplica)

   --%test(moltiplica due valori interi)
   PROCEDURE moltiplica1;

   --%test(moltiplica per zero)
   PROCEDURE moltiplica2;

   --%test(moltiplica per un valore in virgola mobile)
   PROCEDURE moltiplica3;

   --%test(divisione per zero)
   --%throws(zero_divide)
   PROCEDURE dividi;

   --%endcontext


END test_package_da_testare;
/
create or replace PACKAGE BODY         ut3.test_package_da_testare IS

   /* generated by utPLSQL for SQL Developer on 2019-10-07 15:25:29 */

   --
   -- test moltiplica case 1: ...
   --
   PROCEDURE moltiplica1 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      package_da_testare.moltiplica(1,2,l_actual);

      -- populate expected
    l_expected := 2;

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END moltiplica1;

   --
   -- test moltiplica case 2: ...
   --
   PROCEDURE moltiplica2 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      package_da_testare.moltiplica(1,0,l_actual);

      -- populate expected
    l_expected := 0;


      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END moltiplica2;

   --
   -- test moltiplica case 3: ...
   --
   PROCEDURE moltiplica3 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      package_da_testare.moltiplica(1.2,2,l_actual);

      -- populate expected
    l_expected := 2;


      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END moltiplica3;

   --
   -- test moltiplica case 3: ...
   --
   PROCEDURE dividi IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      package_da_testare.dividi(10,0,l_actual);

      -- populate expected
      --l_expected := 2;

      -- assert
      --ut.expect(l_actual).to_equal(l_expected);
   END dividi;

END test_package_da_testare;
/
