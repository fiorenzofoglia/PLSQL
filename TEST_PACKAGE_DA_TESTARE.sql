create or replace PACKAGE     ut3.TEST_PACKAGE_OPERAZIONI IS

   /* generated by utPLSQL for SQL Developer on 2019-10-07 15:25:29 */

   --
   -- test moltiplica case 1: ...
   --
   PROCEDURE moltiplica1 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      package_operazioni.moltiplica(1,2,l_actual);

      -- populate expected
    l_expected := 2;

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END moltiplica1;

   --
   -- test moltiplica case 2: ...
   --
   PROCEDURE moltiplica2 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      package_operazioni.moltiplica(1,0,l_actual);

      -- populate expected
    l_expected := 0;


      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END moltiplica2;

   --
   -- test moltiplica case 3: ...
   --
   PROCEDURE moltiplica3 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      package_operazioni.moltiplica(1.2,2,l_actual);

      -- populate expected
    l_expected := 2;


      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   END moltiplica3;

   --
   -- test moltiplica case 3: ...
   --
   PROCEDURE dividi1 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      package_operazioni.dividi(10,1,l_actual);

      -- populate expected
      --l_expected := 2;

      -- assert
      --ut.expect(l_actual).to_equal(l_expected);
   END dividi1;

   PROCEDURE dividi2 IS
      l_actual   INTEGER := 0;
      l_expected INTEGER := 1;
   BEGIN
      -- populate actual
      package_operazioni.dividi(6,1,l_actual);

      -- populate expected
      --l_expected := 2;

      -- assert
      --ut.expect(l_actual).to_equal(l_expected);
   END dividi2;


END TEST_PACKAGE_OPERAZIONI;
/
