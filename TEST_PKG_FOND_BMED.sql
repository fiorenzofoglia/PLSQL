create or replace PACKAGE SOGG_OUTELAB.test_pkg_fnd_bmed IS

   /* generated by utPLSQL for SQL Developer on 2019-11-22 18:17:19 */

   --%suite(Test per prodotti BMED)
   --%suitepath(alltests)

    cursor select_detail_table is
    select * from SOGG_OUTELAB.DETT_REDDTA_CONTR_BMED where prod_c = 'TJ0';

    dett_fnd_bmed select_detail_table%rowtype;
    
   --%beforeall
   procedure prepare_data;

   --%rollback(manual)
   procedure rollback_proc;

   --%test(Verifica data apertura prodotto)
   PROCEDURE check_data_apertura_contratto;
   
   --%test(Verifica data chiusura prodotto)
   PROCEDURE check_data_chiusura_contratto;
   

   --%test(Verifica data primo movimento)
   PROCEDURE check_data_primo_movimento;

   --%test(Verifica importo versato)
   PROCEDURE check_imp_tot_vers;

   --%test(Verifica importo investito)
   PROCEDURE check_imp_tot_invest;

   --%test(Verifica importo rimborsato)
   PROCEDURE check_imp_tot_rimbo;

   --%test(Verifica quantit√† quote)
   PROCEDURE check_qta_quota_t2;

   --%test(Verifica plus minus versato)
   PROCEDURE check_imp_plus_minus_vers;

   --%test(Verifica plus minus investito)
   PROCEDURE check_imp_plus_minus_invest;

   --%test(Verifica variazione patrimoniale)   
   PROCEDURE check_prc_rend_vpatr_vers_st;
   
   --%test(Verifica variazione patrimoniale annuale)      
   PROCEDURE check_prc_rend_vpatr_vers_annual;   

   --%test(Verifica indice MWRR)   
   PROCEDURE check_prc_rend_mwrr_vers_st;

END test_pkg_fnd_bmed;
/

create or replace PACKAGE BODY SOGG_OUTELAB.test_pkg_fnd_bmed IS

   /* generated by utPLSQL for SQL Developer on 2019-11-22 18:17:19 */

    procedure prepare_data IS
    f char;
	a integer;
	b integer;
	c integer;
    BEGIN
    
		execute immediate 'truncate table SOGG_OUTELAB.DETT_LOG_MOVI_CONTR';
		execute immediate 'truncate table SOGG_OUTELAB.DETT_RIFE_ELAB';
		execute immediate 'truncate table SOGG_OUTELAB.SALDO_TOT_FONDO_BMED';
		execute immediate 'truncate table SOGG_OUTELAB.DETT_REDDTA_CONTR_BMED';

        
		UPDATE 
			cll.EVENTIF 
		SET 
			Gstd_X_Tip_Modf=Gstd_X_Tip_Modf
		WHERE 
			(PROD_C, CONTR_N) IN(
				SELECT PROD_C, CONTR_N
				FROM
					CLL.CONTRCLI 
				WHERE
					CLI_C IN (
					'00006374188' 
					)
			)
		;
        
        dbms_output.put_line('------------------------------------------------------');        
		dbms_output.put_line('PKG_FND_BMED.agg_tab_totali_gg');
		dbms_output.put_line('------------------------------------------------------');
		SOGG_OUTELAB.PKG_FND_BMED.agg_tab_totali_gg(10000, f, a, b, c);
		dbms_output.put_line('------------------------------------------------------');
        dbms_output.put_line('PKG_FND_BMED.calc_redd_aperti');
		SOGG_OUTELAB.PKG_FND_BMED.calc_redd_aperti(10000, f, a, b, c);
        dbms_output.put_line('------------------------------------------------------');        
    
    
        OPEN select_detail_table;
        LOOP
            FETCH select_detail_table INTO dett_fnd_bmed;
            EXIT
        WHEN select_detail_table%NOTFOUND;        
        END LOOP;
        CLOSE select_detail_table;    
    
    END;

    PROCEDURE rollback_proc IS
    BEGIN
        null;
    END;


   PROCEDURE check_data_apertura_contratto IS
      l_actual   DATE;
      l_expected DATE;
   BEGIN
      l_expected := to_date('2019-03-28','YYYY-MM-DD');
    
      -- assert
      ut.expect(dett_fnd_bmed.dat_aper_contr).to_equal(l_expected);
   END check_data_apertura_contratto;

   PROCEDURE check_data_chiusura_contratto IS
      l_actual   DATE;
      l_expected DATE;
   BEGIN
      
      -- assert
      ut.expect(dett_fnd_bmed.dat_chiu_contr).to_( be_null() );
   END check_data_chiusura_contratto;


   PROCEDURE check_data_primo_movimento IS
      l_actual   DATE;
      l_expected DATE;
   BEGIN
      l_expected := to_date('2019-03-29','YYYY-MM-DD');
      
      -- assert
      ut.expect(dett_fnd_bmed.dat_aper_contr).to_equal(l_expected);
   END check_data_primo_movimento;

   PROCEDURE check_imp_tot_vers IS
      l_expected NUMBER;
   BEGIN
      l_expected := 36000;
      
      -- assert
      ut.expect(dett_fnd_bmed.imp_tot_vers).to_equal(l_expected);
   END check_imp_tot_vers;

   PROCEDURE check_imp_tot_invest IS
      l_expected NUMBER;
   BEGIN
      l_expected := 35964;
      
      -- assert
      ut.expect(dett_fnd_bmed.imp_tot_invest).to_equal(l_expected);
   END check_imp_tot_invest;

   PROCEDURE check_imp_tot_rimbo IS
      l_expected NUMBER;
   BEGIN
      l_expected := 1000;
      
      -- assert
      ut.expect(dett_fnd_bmed.imp_tot_rimbo).to_equal(l_expected);
   END check_imp_tot_rimbo;



   PROCEDURE check_qta_quota_t2 IS
      l_expected NUMBER;
   BEGIN
      l_expected := 4713.097;
      
      -- assert
      ut.expect(dett_fnd_bmed.qta_quota_t2).to_equal(l_expected);
   END check_qta_quota_t2;


   PROCEDURE check_imp_plus_minus_vers IS
      l_expected NUMBER;
   BEGIN
      l_expected := -35000;
      
      -- assert
      ut.expect(dett_fnd_bmed.imp_plus_minus_vers).to_equal(l_expected);
   END check_imp_plus_minus_vers;


   PROCEDURE check_imp_plus_minus_invest IS
      l_expected NUMBER;
   BEGIN
      l_expected := -34964;
      
      -- assert
      ut.expect(dett_fnd_bmed.imp_plus_minus_invest).to_equal(l_expected);
   END check_imp_plus_minus_invest;


   PROCEDURE check_prc_rend_vpatr_vers_st IS
      l_expected NUMBER;
   BEGIN
      l_expected := -97.22222222222222222222222222222222222222;
      
      -- assert
      ut.expect(dett_fnd_bmed.prc_rend_vpatr_vers_st).to_equal(l_expected);
   END check_prc_rend_vpatr_vers_st;


   PROCEDURE check_prc_rend_vpatr_vers_annual IS
      l_expected NUMBER;
   BEGIN

      
      -- assert
      ut.expect(dett_fnd_bmed.prc_rend_vpatr_vers_annual).to_( be_null() );
   END check_prc_rend_vpatr_vers_annual;


   PROCEDURE check_prc_rend_mwrr_vers_st IS
      l_expected NUMBER;
   BEGIN
        
      l_expected := -99.88158673771462403789224393132030787448;
      -- assert
      ut.expect(dett_fnd_bmed.prc_rend_mwrr_vers_st).to_equal(l_expected);
   END check_prc_rend_mwrr_vers_st;

   
END test_pkg_fnd_bmed;
/
